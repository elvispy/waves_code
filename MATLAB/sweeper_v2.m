%% ------------------------------------------------------------------------
%  Surferbot parameter sweep
%  ------------------------------------------------------------------------
%  ?  base values (copied from your last manual call)
base = struct( ...
    'sigma'         , 72.2e-3 , ...
    'rho'           , 1000.0  , ...
    'omega'         , 2*pi*5  , ...
    'nu'            , 1.0e-6  , ...
    'g'             , 9.81    , ...
    'L_raft'        , 0.05    , ...
    'motor_position', 0.015   , ...
    'd'             , 0.03    , ...
    'EI'            , 3.0e9*3e-2*(1e-4)^3/12 , ...
    'rho_raft'      , 0.018*3 , ...
    'L_domain'      , 0.2     , ...
    'domainDepth'   , 0.4     , ...
    'n'             , 101     , ...
    'M'             , 200     , ...
    'motor_inertia' , 0.13e-3*2.5e-3 , ...
    'BC'            , 'radiative' );

%  ?  variables to sweep: *edit these vectors only*
sweep.omega = 2*pi*10 * [1 5 7];          % three drive frequencies
sweep.EI    = base.EI * [0.01 .1 1 10];       % two stiffnesses
sweep.motor_inertia = base.motor_inertia * [0.01 .1 1 10]; % Motor inertia
%sweep.n     = [101 201];             % two grid resolutions

%% ------------------------------------------------------------------------
%  ?  generate all combinations and run
vars   = fieldnames(sweep);
grid   = cellfun(@(v) sweep.(v), vars,'uni',0);
comb   = cell(1,numel(vars));
[comb{:}] = ndgrid(grid{:});         % n-dimensional mesh

outdir = 'surferbot_results';

for idx = 1:numel(comb{1})
    args = base;
    for k = 1:numel(vars)
        args.(vars{k}) = comb{k}(idx);   % overwrite swept field
    end
    % convert struct -> name/value cell for the solver
    nv = reshape([fieldnames(args)'; struct2cell(args)'] ,1,[]);
    % call saver (does solver + mp4 + figs)
    save_surferbot_run(outdir , nv{:});
end
